1_1 
Описать функцию f n, которая вычисляет ((2^2)^2)^...^2 - n возведений в степень

1_2
Описать функцию g n, которая вычисляет 
1+10*(2+10*(3+10*(4+...+10*n)))
Пример вызова:
g 4
Должно получиться 1+10*(2+10*(3+10*4)), то есть 4321

1_3
Описать функцию 
sumcos n = cos(1+2+...+n)/(cos 1+cos 2+...+cos n)
Дополнительное условие: В этой функции. пожалуйста, обязательно используйте хвостовую рекурсию 
и накапливающие параметры.

1_4
Описать функцию sumfact n: 
sumfact n = 1!+2!+...+n!
В решении желательно (но не обязательно) использовать хвостовую рекурсию и накапливающие параметры.
Пример вызова:
sumfact 3
Результат должен быть равен 9.

2_1
Опишите функцию b n, которая для данного целого числа n проверяет, можно ли представить данное число, 
как сумму двух степеней двойки, и возвращает True или False.
Пример вызова:
b 10 - должно получиться True, потому что 10 = 8 + 2
b 22 - должно получиться False
b 17 - должно получиться True, потому что 17 = 16 + 1 (и 1 - это тоже степень 2)

2_2
Пусть у нас есть лист в клетку n на n. Фишка стоит в левом нижнем углу поля. На каждом шаге она может 
ходить или в клетку справа или в клетку сверху, или в клетку справа и сверху по диагонали.
Опишите функцию numPath n, которая для данного целого числа n вычисляет, сколько есть у фишки дойти 
до правого верхнего угла.
Пример вызова:
numPath 2 - должно получиться 3, потому что есть 3 способа: 
пойти вправо и потом вверх, пойти вверх и потом вправо, или пойти сразу по диагонали.

3_1
Описать функцию minlist, которая ищет минимальный элемент в данном списке.
Пример вызова:
minlist [3,2,7]
Ответ должен быть равен 2.
Замечание: На самом деле, конечно, в Хаскеле есть такая стандартная функция (называется minimum), 
но, пожалуйста, в этой задаче вы ее не используйте.

3_2
Описать функцию minsum, которая ищет минимум суммы двух стоящих рядом элементов в данном списке.
Пример вызова:
minsum [1,8,3,2,7]
Ответ должен быть равен 5 (3+2).

3_3
Описать функцию 
check cond xs, которая для данного списка xs и логической функции cond проверяет, верно ли, 
что в списке есть элемент, для которого cond возвращает True. Результат должен быть равен True, 
если такой элемент есть, и False, если его нет.
Примеры вызова:
check (\x->x>5) [3,2,7,4]
Ответ должен быть равен True, потому что в списке есть число, большее 5 (это число 7). 
check (\x->x<1) [3,2,7,4]
Ответ должен быть равен False, потому что в списке нет чисел, меньших 1. 
Замечания:
В Хаскеле есть такая стандартная функция (называется any). Но, пожалуйста, в этой задаче вы ее не используйте.

3_4
Описать функцию checkSum, которая возвращает True, если в списке есть два элемента, сумма которых равна 10.
Примеры вызова:
checkSum [3,2,7]
Ответ должен быть равен True, потому что 3+7==10.
checkSum [3,2,9,5]
Ответ должен быть равен False.

4_1
Описать функцию upDown, которая проверяет, верно ли, что в данном списке сначала строго возрастают, а потом, 
с какого-то момента, строго убывают.
Примеры вызова:
upDown [2, 6, 9, 7, 3, 1]
- должна вернуть True
upDown [2, 6, 9, 7, 3, 1, 8]
- должна вернуть False, потому что числа возрастают, убывают и потом снова возрастают.
upDown [2, 6, 9]
- должна вернуть False, потому что числа только возрастают
Уточнение:
 Имеется в виду, что, если взять все пары стоящих рядом чисел и сравнить числа в парах, то сначала насколько раз 
 (по крайней мере один раз) первое число будет меньше, а потом несколько раз (тоже по крайней мере один раз) 
 первое число будет больше.

6_1
Опишите функцию isosc (от слова isosceles - равнобедренный), у которой три параметра - пары целых чисел, 
и которая возвращает True, если соответствующие точки на плоскости задают равнобедренный треугольник, а иначе False.
Примеры вызова:
isosc (0, 2) (2, 0) (2,2)
- результат должен быть равен True
isosc (-3, 2) (2, 0) (2,2)
- результат должен быть равен False

6_2
Описать функцию minsum, которая ищет минимум суммы двух стоящих рядом элементов в данном списке.
Пример вызова:
minsum [1,8,3,2,7]
Ответ должен быть равен 5 (3+2).
Дополнительное условие: Задачу надо написать, используя стандартные функции, без рекурсии.

Замечания:
- для того, чтобы найти минимум элементов списка, можно использовать стандартную функцию minimun

6_3
Описать функцию height, которая ищет высоту данного дерева. 

Замечание 1: В задаче вы сначала должны описать data для дерева.
Замечание 2: Чему равна высота дерева, в котором только одна вершина, у которой нет потомков? 
Давайте для определенности считать, что у такого дерева высота 0.
Примеры вызова:
height (Node 1 Empty Empty)
Ответ должен быть 0
height (Node 1 (Node 1 Empty Empty) Empty)
Ответ должен быть 1 

6_4
Пусть в нашей программе мы хотим хранить информацию о товарах в кондитерском магазине. Товары могут быть:
- или тортами, и тогда мы храним их название, и цену (Например, "Санчо" 321)
- или упаковками конфет, и тогда мы храним их название, цену за килограмм, и вес упаковки в кг. (например, "Белочка" 771 0.25).

а. Опишите тип данных Candy, позволяющий хранить такую информацию.
б. Опишите функцию totalPrice, которая для данного списка товаров возвращает общую цену всех товаров в списке.
в. Чтобы было хоть какое-то тестирование, пожалуйста, включите в решение пример вызова totalPrice, 
который в результате дает 1000. И назовите его test. Т.е. что-то вроде:
test = totalPrice ...какой-то список из товаров разных видов...
и результат должен быть равен 1000.

Замечание:
Обратите, пожалуйста внимание, цена для тортов и упаковок конфет вычисляется по разному. Для конфет она зависит еще и от веса.

6_5
Определите функцию repeatFunc с двумя параметрами f и n, которая возвращает функцию f.f. ... .f (т.е. композицию функции 
с самой собой n раз).
Пример вызова:
f = repeatFunc sin 3
должно определить f x = sin (sin (sin x))
и после этого можно написать, например, f 2 и получить sin (sin (sin 2))- это примерно 0.7097.

